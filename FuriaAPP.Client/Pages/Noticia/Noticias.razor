@page "/noticias"
@using FuriaAPP.Shared.DTOs.Usuario
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<h1 class="mb-4">Notícias de E-Sports</h1>

@if (noticias == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
    </div>
}
else if (!noticias.Any())
{
    <div class="alert alert-info">
        Nenhuma notícia disponível para seus jogos de interesse. <br>
        @if (jogosInteresse.Any())
        {
            <span>Jogos de interesse: @string.Join(", ", jogosInteresse.Select(j => j.NomeJogo))</span>
        }
        else
        {
            <span>Você não tem jogos de interesse configurados</span>
        }
    </div>
}
else
{
    <div class="row">
        @foreach (var noticia in noticias)
        {
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <a href="/noticia/@noticia.Id" class="text-decoration-none">
                            <h5 class="card-title text-primary">@noticia.Titulo</h5>
                        </a>
                        <h6 class="card-subtitle mb-2 text-muted">
                            @noticia.DataPublicacao.ToString("dd/MM/yyyy HH:mm")
                            @if (noticia.JogoId.HasValue)
                            {
                                <span class="badge bg-primary ms-2">
                                    @noticia.NomeJogo
                                </span>
                            }
                        </h6>
                        <p class="card-text">
                            @(noticia.Conteudo?.Length > 100 ? noticia.Conteudo.Substring(0, 100) + "..." : noticia.Conteudo)
                        </p>
                        <a href="/noticia/@noticia.Id" class="btn btn-primary">
                            Ler mais
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<NoticiaDto>? noticias;
    private List<UsuarioJogoInteresseDto> jogosInteresse = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    private async Task CarregarDados()
    {
        await CarregarDadosUsuario();
        await CarregarNoticias();
        StateHasChanged();
    }

    private async Task CarregarDadosUsuario()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                var httpClient = HttpClientFactory.CreateClient("ServerAPI");
                var response = await httpClient.GetAsync($"api/usuario/{userId}");
                
                if (response.IsSuccessStatusCode)
                {
                    var usuario = await response.Content.ReadFromJsonAsync<UsuarioDto>();
                    jogosInteresse = usuario?.JogoDeInteresse ?? new();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do usuário: {ex.Message}");
        }
    }

    private async Task CarregarNoticias()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ServerAPI");
            var response = await httpClient.GetAsync("api/noticia");
            
            if (response.IsSuccessStatusCode)
            {
                var todasNoticias = await response.Content.ReadFromJsonAsync<List<NoticiaDto>>();
                
                noticias = todasNoticias?
                    .OrderByDescending(n => n.DataPublicacao)
                    .ToList() ?? new();
                
                Console.WriteLine($"Notícias carregadas: {noticias.Count}");
            }
            else
            {
                Console.WriteLine($"Erro na API: {response.StatusCode}");
                noticias = new List<NoticiaDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar notícias: {ex.ToString()}");
            noticias = new List<NoticiaDto>();
        }
    }
}