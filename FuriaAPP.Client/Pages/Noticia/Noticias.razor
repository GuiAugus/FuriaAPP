@page "/noticias"
@using FuriaAPP.Shared.DTOs.Usuario
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="noticias-container">
    <h1 class="titulo-principal">Notícias de E-Sports</h1>

    @if (noticias == null)
    {
        <div class="carregando-container">
            <div class="spinner-carregando" role="status">
                <span class="texto-oculto">Carregando...</span>
            </div>
        </div>
    }
    else if (!noticias.Any())
    {
        <div class="alertas-sem-noticias">
            Nenhuma notícia disponível para seus jogos de interesse. <br>
            @if (jogosInteresse.Any())
            {
                <span>Jogos de interesse: @string.Join(", ", jogosInteresse.Select(j => j.NomeJogo))</span>
            }
            else
            {
                <span>Você não tem jogos de interesse configurados</span>
            }
        </div>
    }
    else
    {
        <div class="grid-noticias">
            @foreach (var noticia in noticias)
            {
                <div class="coluna-noticia">
                    <div class="card-noticia">
                        <div class="corpo-card">
                            <a href="/noticia/@noticia.Id" class="link-titulo">
                                <h5 class="titulo-noticia">@noticia.Titulo</h5>
                            </a>
                            <h6 class="subtitulo-noticia">
                                @noticia.DataPublicacao.ToString("dd/MM/yyyy HH:mm")
                                @if (noticia.JogoId.HasValue)
                                {
                                    <span class="badge-jogo">
                                        @noticia.NomeJogo
                                    </span>
                                }
                            </h6>
                            <p class="resumo-noticia">
                                @(noticia.Conteudo?.Length > 100 ? noticia.Conteudo.Substring(0, 100) + "..." : noticia.Conteudo)
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<NoticiaDto>? noticias;
    private List<UsuarioJogoInteresseDto> jogosInteresse = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    private async Task CarregarDados()
    {
        await CarregarDadosUsuario();
        await CarregarNoticias();
        StateHasChanged();
    }

    private async Task CarregarDadosUsuario()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                var httpClient = HttpClientFactory.CreateClient("ServerAPI");
                var response = await httpClient.GetAsync($"api/usuario/{userId}");
                
                if (response.IsSuccessStatusCode)
                {
                    var usuario = await response.Content.ReadFromJsonAsync<UsuarioDto>();
                    jogosInteresse = usuario?.JogoDeInteresse ?? new();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do usuário: {ex.Message}");
        }
    }

    private async Task CarregarNoticias()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ServerAPI");
            var response = await httpClient.GetAsync("api/noticia");
            
            if (response.IsSuccessStatusCode)
            {
                var todasNoticias = await response.Content.ReadFromJsonAsync<List<NoticiaDto>>();
                
                noticias = todasNoticias?
                    .OrderByDescending(n => n.DataPublicacao)
                    .ToList() ?? new();
                
                Console.WriteLine($"Notícias carregadas: {noticias.Count}");
            }
            else
            {
                Console.WriteLine($"Erro na API: {response.StatusCode}");
                noticias = new List<NoticiaDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar notícias: {ex.ToString()}");
            noticias = new List<NoticiaDto>();
        }
    }
}