@page "/noticia/{id:int}"
@using FuriaAPP.Shared.DTOs.Usuario
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@if (noticia == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <button @onclick="VoltarParaNoticias" class="btn btn-outline-secondary mb-3">
            &larr; Voltar para notícias
        </button>
        
        <article class="noticia-detalhe">
            <header class="mb-4">
                <h1>@noticia.Titulo</h1>
                <div class="text-muted mb-3">
                    Publicado em: @noticia.DataPublicacao.ToString("dd/MM/yyyy HH:mm")
                    @if (noticia.JogoId.HasValue && jogosInteresse.Any(j => j.JogoId == noticia.JogoId.Value))
                    {
                        <span class="badge bg-primary ms-2">
                            @jogosInteresse.First(j => j.JogoId == noticia.JogoId.Value).NomeJogo
                        </span>
                    }
                    else if (noticia.JogoId.HasValue)
                    {
                        <span class="badge bg-secondary ms-2">Jogo ID: @noticia.JogoId</span>
                    }
                </div>
                @if (noticia.CampeonatoId.HasValue)
                {
                    <div>
                        <span class="badge bg-info">Campeonato ID: @noticia.CampeonatoId</span>
                    </div>
                }
            </header>
            
            <div class="noticia-conteudo mb-4">
                @if (!string.IsNullOrEmpty(noticia.Conteudo))
                {
                    var conteudoComQuebras = noticia.Conteudo.Replace("\n", "<br />");
                    @((MarkupString)conteudoComQuebras)
                }
            </div>
            
            @if (noticia.JogoHistoricoId.HasValue)
            {
                <div class="mt-4 p-3 bg-light rounded">
                    <h5>ID da Partida: @noticia.JogoHistoricoId</h5>
                </div>
            }
        </article>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private NoticiaDto? noticia;
    private List<UsuarioJogoInteresseDto> jogosInteresse = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarDadosUsuario();
        await CarregarNoticia();
    }

    private async Task CarregarDadosUsuario()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
                
                var jogosClaim = user.FindFirst("jogos_interesse")?.Value;
                
                if (!string.IsNullOrEmpty(jogosClaim))
                {
                    jogosInteresse = JsonSerializer.Deserialize<List<UsuarioJogoInteresseDto>>(jogosClaim) ?? new();
                }
                else
                {
                    var httpClient = HttpClientFactory.CreateClient("ServerAPI");
                    var response = await httpClient.GetAsync("api/usuario");
                    
                    if (response.IsSuccessStatusCode)
                    {
                        var todosUsuarios = await response.Content.ReadFromJsonAsync<List<UsuarioDto>>();
                        var usuarioLogado = todosUsuarios?.FirstOrDefault(u => u.Id.ToString() == userId);
                        jogosInteresse = usuarioLogado?.JogoDeInteresse ?? new();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do usuário: {ex.Message}");
        }
    }

    private async Task CarregarNoticia()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ServerAPI");
            var response = await httpClient.GetAsync($"api/noticia/{Id}");
            
            if (response.IsSuccessStatusCode)
            {
                noticia = await response.Content.ReadFromJsonAsync<NoticiaDto>();
            }
            else
            {
                NavigationManager.NavigateTo("/noticias");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar notícia: {ex.Message}");
            NavigationManager.NavigateTo("/noticias");
        }
    }

    private void VoltarParaNoticias()
    {
        NavigationManager.NavigateTo("/noticias");
    }
}