@page "/cadastro"
@using FuriaAPP.Shared.DTOs.Usuario
@using FuriaAPP.Shared.DTOs.Jogo
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1 class="mb-4">Cadastro de Usuário</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="usuario" OnValidSubmit="HandleCadastro">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="nome" class="form-label">Nome</label>
        <InputText id="nome" class="form-control" @bind-Value="usuario.Nome" />
        <ValidationMessage For="@(() => usuario.Nome)" />
    </div>

    <div class="form-group mb-3">
        <label for="cpf" class="form-label">CPF</label>
        <InputText id="cpf" class="form-control" @bind-Value="usuario.CPF" />
        <ValidationMessage For="@(() => usuario.CPF)" />
    </div>

    <div class="form-group mb-3">
        <label for="email" class="form-label">E-mail</label>
        <InputText id="email" class="form-control" @bind-Value="usuario.Email" />
        <ValidationMessage For="@(() => usuario.Email)" />
    </div>

    <div class="form-group mb-3">
        <label for="senha" class="form-label">Senha</label>
        <InputText id="senha" type="password" class="form-control" @bind-Value="usuario.Senha" />
        <ValidationMessage For="@(() => usuario.Senha)" />
    </div>

    <div class="form-group mb-3">
        <label class="form-label">Jogos de Interesse</label>
        @if (jogosDisponiveis == null)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
        }
        else if (!jogosDisponiveis.Any())
        {
            <div class="alert alert-warning">Nenhum jogo disponível no momento</div>
        }
        else
        {
            <div class="jogos-container border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                @foreach (var jogo in jogosDisponiveis)
                {
                    <div class="form-check">
                        <input type="checkbox" 
                            id="@($"jogo-{jogo.Id}")" 
                            class="form-check-input" 
                            checked="@(jogosSelecionados.Contains(jogo.Id))"
                            @onchange="@((e) => ToggleJogoSelecionado(jogo.Id, e.Value as bool? ?? false))" />
                        <label class="form-check-label" for="@($"jogo-{jogo.Id}")">@jogo.Nome</label>
                    </div>
                }
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary w-100 mt-3">Cadastrar</button>
</EditForm>

@code {
    private UsuarioDto usuario = new();
    private List<JogoDto> jogosDisponiveis = new();
    private List<int> jogosSelecionados = new();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CarregarJogosDisponiveis();
    }

    private async Task CarregarJogosDisponiveis()
    {
        try
        {
            var response = await Http.GetAsync("api/competicoes/jogos");
            
            if (response.IsSuccessStatusCode)
            {
                var jogos = await response.Content.ReadFromJsonAsync<List<JogoDto>>();
                jogosDisponiveis = jogos ?? new List<JogoDto>();
            }
            else
            {
                errorMessage = $"Erro: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar jogos: {ex.Message}";
        }
    }

    private void ToggleJogoSelecionado(int jogoId, bool isSelected)
    {
        if (isSelected)
        {
            jogosSelecionados.Add(jogoId);
        }
        else
        {
            jogosSelecionados.Remove(jogoId);
        }
    }

    private async Task HandleCadastro()
    {
        errorMessage = string.Empty;
        
        usuario.JogoDeInteresse = jogosSelecionados
            .Select(id => new UsuarioJogoInteresseDto { JogoId = id })
            .ToList();

        try
        {
            var response = await Http.PostAsJsonAsync("api/usuario/cadastro", usuario);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(errorMessage))
                {
                    errorMessage = $"Erro no cadastro: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro durante o cadastro: {ex.Message}";
        }
    }
}