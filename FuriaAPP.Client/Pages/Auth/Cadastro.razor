@page "/cadastro"
@using FuriaAPP.Shared.DTOs.Usuario
@using FuriaAPP.Shared.DTOs.Jogo
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Cadastro> Logger

<PageTitle>Cadastro</PageTitle>


<div class="cadastro-container">

    <div class="cadastro-card">

    <h1 class="cadastro-titulo">Cadastro de Usuário</h1>
    
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="cadastro-alerta cadastro-alerta--erro">@errorMessage</div>
        }

        <EditForm Model="usuario" OnValidSubmit="HandleCadastro">
            <DataAnnotationsValidator />
            <ValidationSummary class="cadastro-alerta cadastro-alerta--erro" />

            <div class="cadastro-campo">
                <InputText id="nome" class="cadastro-input" @bind-Value="usuario.Nome" placeholder=" " />
                <label for="nome" class="cadastro-rotulo">Nome Completo</label>
                <ValidationMessage For="@(() => usuario.Nome)" class="cadastro-mensagem-erro" />
            </div>

            <div class="cadastro-campo">
                <InputText id="cpf" class="cadastro-input" @bind-Value="usuario.CPF" placeholder=" " />
                <label for="cpf" class="cadastro-rotulo">CPF</label>
                <ValidationMessage For="@(() => usuario.CPF)" class="cadastro-mensagem-erro" />
            </div>

            <div class="cadastro-campo">
                <InputText id="email" class="cadastro-input" @bind-Value="usuario.Email" placeholder=" " />
                <label for="email" class="cadastro-rotulo">E-mail</label>
                <ValidationMessage For="@(() => usuario.Email)" class="cadastro-mensagem-erro" />
            </div>

            <div class="cadastro-campo">
                <InputText id="senha" type="password" class="cadastro-input" @bind-Value="usuario.Senha" placeholder=" " />
                <label for="senha" class="cadastro-rotulo">Senha</label>
                <ValidationMessage For="@(() => usuario.Senha)" class="cadastro-mensagem-erro" />
            </div>

            <div class="cadastro-jogos-container">
                <label class="cadastro-rotulo cadastro-rotulo--destaque">Jogos de Interesse</label>
                
                @if (loadingJogos)
                {
                    <div class="cadastro-carregando">
                        <div class="cadastro-spinner" role="status">
                            <span class="cadastro-texto-oculto">Carregando...</span>
                        </div>
                    </div>
                }
                else if (!jogosDisponiveis?.Any() ?? true)
                {
                    <div class="cadastro-alerta cadastro-alerta--aviso">Nenhum jogo disponível no momento</div>
                }
                else
                {
                    <div class="cadastro-lista-jogos">
                        @if (jogosDisponiveis != null)
                        {
                            @foreach (var jogo in jogosDisponiveis)
                            {
                                <div class="cadastro-item-jogo">
                                    <input type="checkbox" 
                                        id="@($"jogo-{jogo.Id}")" 
                                        class="cadastro-checkbox" 
                                        checked="@jogosSelecionados.Contains(jogo.Id)"
                                        @onchange="@(e => ToggleJogoSelecionado(jogo.Id, e.Value))" />
                                    <label class="cadastro-rotulo-checkbox" for="@($"jogo-{jogo.Id}")">
                                        @jogo.Nome
                                    </label>
                                </div>
                            }
                        }
                    </div>
                }
            </div>

            <div class="cadastro-botoes">
                <button type="submit" class="cadastro-botao cadastro-botao--primario" disabled="@(isSubmitting || loadingJogos)">
                    @if (isSubmitting)
                    {
                        <span class="cadastro-spinner cadastro-spinner--pequeno"></span>
                        <span>Cadastrando...</span>
                    }
                    else
                    {
                        <span>Cadastrar</span>
                    }
                </button>
                
                <a href="/login" class="cadastro-botao cadastro-botao--secundario">
                    Já tem conta? Faça login
                </a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private UsuarioDto usuario = new();
    private List<JogoDto>? jogosDisponiveis;
    private List<int> jogosSelecionados = new();
    private string errorMessage = string.Empty;
    private bool loadingJogos = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            await CarregarJogosDisponiveis();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro durante a inicialização da página de cadastro");
            errorMessage = "Ocorreu um erro ao carregar a página. Tente recarregar.";
        }
    }

    private async Task CarregarJogosDisponiveis()
    {
        try
        {
            loadingJogos = true;
            StateHasChanged();

            var httpClient = HttpClientFactory.CreateClient("ServerAPI");
            var response = await httpClient.GetAsync("api/competicoes/jogos");
            
            if (response.IsSuccessStatusCode)
            {
                jogosDisponiveis = await response.Content.ReadFromJsonAsync<List<JogoDto>>();
                Logger.LogInformation("Jogos carregados com sucesso. Total: {Count}", jogosDisponiveis?.Count ?? 0);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erro ao carregar jogos: {response.StatusCode}";
                Logger.LogError("Falha ao carregar jogos. Status: {StatusCode}, Resposta: {Error}", 
                    response.StatusCode, errorContent);
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = "Não foi possível conectar ao servidor. Verifique sua conexão.";
            Logger.LogError(httpEx, "Erro de conexão ao carregar jogos");
        }
        catch (Exception ex)
        {
            errorMessage = "Ocorreu um erro inesperado ao carregar os jogos.";
            Logger.LogError(ex, "Erro inesperado ao carregar jogos");
        }
        finally
        {
            loadingJogos = false;
            StateHasChanged();
        }
    }

    private void ToggleJogoSelecionado(int jogoId, object? isSelectedObj)
    {
        if (isSelectedObj is bool isSelected)
        {
            if (isSelected)
            {
                if (!jogosSelecionados.Contains(jogoId))
                {
                    jogosSelecionados.Add(jogoId);
                }
            }
            else
            {
                jogosSelecionados.Remove(jogoId);
            }
        }
    }


    private async Task HandleCadastro()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            var dadosCadastro = new UsuarioDto
            {
                Nome = usuario.Nome,
                CPF = usuario.CPF,
                Email = usuario.Email,
                Senha = usuario.Senha,
                JogoDeInteresse = jogosSelecionados
                    .Select(id => new UsuarioJogoInteresseDto { JogoId = id })
                    .ToList()
            };

            Logger.LogInformation("Iniciando cadastro para: {Email}", dadosCadastro.Email);
            
            var httpClient = HttpClientFactory.CreateClient("ServerAPI");
            var response = await httpClient.PostAsJsonAsync("api/usuario/cadastro", dadosCadastro);

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Cadastro realizado com sucesso para: {Email}", dadosCadastro.Email);
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(errorMessage))
                {
                    errorMessage = $"Erro no cadastro: {response.StatusCode}";
                }
                Logger.LogError("Falha no cadastro - Status: {StatusCode}, Mensagem: {ErrorMessage}", 
                    response.StatusCode, errorMessage);
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = "Erro de conexão com o servidor. Verifique sua internet.";
            Logger.LogError(httpEx, "Erro HTTP durante o cadastro");
        }
        catch (Exception ex)
        {
            errorMessage = "Ocorreu um erro inesperado durante o cadastro.";
            Logger.LogError(ex, "Erro inesperado durante o cadastro");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}