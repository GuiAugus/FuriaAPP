@page "/login"
@using FuriaAPP.Shared.DTOs.Usuario
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1 class="mb-4">Login</h1>

<EditForm Model="loginDto" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="email" class="form-label">E-mail</label>
        <InputText id="email" class="form-control" @bind-Value="loginDto.Email" />
        <ValidationMessage For="@(() => loginDto.Email)" />
    </div>

    <div class="form-group mb-3">
        <label for="senha" class="form-label">Senha</label>
        <InputText id="senha" type="password" class="form-control" @bind-Value="loginDto.Senha" />
        <ValidationMessage For="@(() => loginDto.Senha)" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private LoginDto loginDto = new();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        
        try
        {
            var response = await Http.PostAsJsonAsync("api/usuario/login", loginDto);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(errorMessage))
                {
                    errorMessage = "Erro ao tentar fazer login. Por favor, tente novamente.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro durante o login: {ex.Message}";
        }
    }
}