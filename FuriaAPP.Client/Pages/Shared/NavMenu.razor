@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using FuriaAPP.Client.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject ILogger<NavMenu> Logger
@implements IDisposable

<div class="topnav">
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <nav>
            <div>
                <NavLink href="" Match="NavLinkMatch.All">
                    <span class="nav-button" aria-hidden="true">Home</span> 
                </NavLink>
            </div>
            
            @if (isAuthenticated)
            {
                <div>
                    <NavLink href="/noticias">
                        <span class="nav-button" aria-hidden="true">Noticias</span> 
                    </NavLink>
                </div>
                <div class="logout-container">
                    <button @onclick="Logout" disabled="@isLoggingOut">
                        @if (isLoggingOut)
                        {
                            <span class="nav-button" role="status" aria-hidden="true">Saindo...</span>
                        }
                        else
                        {
                            <span class="nav-button" aria-hidden="true">Logout</span>
                        }
                    </button>
                </div>
            }
            else
            {
                <div>
                    <NavLink href="/login">
                        <span class="nav-button" aria-hidden="true">Login</span> 
                    </NavLink>
                </div>
                <div>
                    <NavLink href="/cadastro">
                        <span class="nav-button" aria-hidden="true">Cadastrar</span> 
                    </NavLink>
                </div>
            }
        </nav>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isAuthenticated = false;
    private bool isLoggingOut = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await UpdateAuthenticationState();
            AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao inicializar NavMenu");
        }
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        try
        {
            await UpdateAuthenticationState();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao atualizar estado de autenticação");
        }
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        if (isLoggingOut) return;
        
        isLoggingOut = true;
        
        try
        {
            await localStorage.RemoveItemAsync("authToken");
            await localStorage.RemoveItemAsync("usuario");
            
            if (AuthenticationStateProvider is CustomAuthStateProvider authProvider)
            {
                await authProvider.NotifyUserLogout();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro durante o logout");
        }
        finally
        {
            isLoggingOut = false;
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
    }

    public void Dispose()
    {
        try
        {
            AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao desinscrever eventos");
        }
    }
}